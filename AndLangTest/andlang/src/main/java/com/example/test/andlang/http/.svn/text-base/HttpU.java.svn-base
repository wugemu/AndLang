package com.example.test.andlang.http;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import android.util.Log;

import com.example.test.andlang.andlangutil.BaseLangApplication;
import com.example.test.andlang.andlangutil.BaseLangPresenter;
import com.example.test.andlang.andlangutil.LangImageUpInterface;
import com.example.test.andlang.util.ActivityUtil;
import com.example.test.andlang.util.BaseLangUtil;
import com.example.test.andlang.util.LogUtil;
import com.example.test.andlang.util.PicSelUtil;
import com.example.test.andlang.util.ToastUtil;

import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import okhttp3.Cache;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Dispatcher;
import okhttp3.FormBody;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.logging.HttpLoggingInterceptor;

/**
 * Created by 1 on 2016/1/18.
 */
public class HttpU {
    private boolean openLog=false;//true设置使用网络日志 false不使用
    private boolean openDns=false;//true设置使用自定义DNS false不使用

    public static final String COOKIE = "Cookie";

    private static HttpU mInstance;
    private final Handler handler;
    private OkHttpClient mOkHttpClient;
    private static final int TIME_OUT = 30 * 1000; // 超时时间
    private static final String CHARSET = "utf-8"; // 设置编码
    private static final MediaType MEDIA_TYPE_PNG = MediaType.parse("image/*");
    private HttpU() {
        mOkHttpClient = newOkHttpClient();
        handler = new Handler(Looper.getMainLooper());
    }



    public static HttpU getInstance() {
        if (mInstance == null) {
            synchronized (HttpU.class) {
                if (mInstance == null) {
                    mInstance = new HttpU();
                }
            }
        }
        return mInstance;
    }

    public OkHttpClient newOkHttpClient(){
        HttpLoggingInterceptor logInterceptor = new HttpLoggingInterceptor(new HttpLogger());
        logInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
        if(openDns) {
            return new OkHttpClient.Builder().dispatcher(new Dispatcher(ExecutorServiceUtil.getInstence().getExecutorService())).readTimeout(10, TimeUnit.SECONDS)// 设置读取超时时间
                    .writeTimeout(10, TimeUnit.SECONDS)// 设置写的超时时间
                    .connectTimeout(20, TimeUnit.SECONDS)// 设置连接超时时间
                    .addNetworkInterceptor(logInterceptor)//添加网络请求日志
                    .dns(new HttpDns())
                    .build();
        }else {
            if(openLog) {
                return new OkHttpClient.Builder().dispatcher(new Dispatcher(ExecutorServiceUtil.getInstence().getExecutorService())).readTimeout(10, TimeUnit.SECONDS)// 设置读取超时时间
                        .writeTimeout(10, TimeUnit.SECONDS)// 设置写的超时时间
                        .connectTimeout(20, TimeUnit.SECONDS)// 设置连接超时时间
                        .addNetworkInterceptor(logInterceptor)//添加网络请求日志
                        .build();
            }else {
                //新建一个cache，指定目录为外部目录下的okhttp_cache目录，大小为100M
                Cache cache = new Cache(PicSelUtil.getCacheDir(), 100 * 1024 * 1024);
                return new OkHttpClient.Builder().dispatcher(new Dispatcher(ExecutorServiceUtil.getInstence().getExecutorService())).readTimeout(10, TimeUnit.SECONDS)// 设置读取超时时间
                        .writeTimeout(10, TimeUnit.SECONDS)// 设置写的超时时间
                        .connectTimeout(20, TimeUnit.SECONDS)// 设置连接超时时间
                        .cache(cache)//缓存设置
                        .addInterceptor(new RequestCacheI())//请求网络拦截
//                      .addNetworkInterceptor(new ResponseCacheI(context))//请求返回网络拦截
                        .build();
            }
        }
    }

    /**
     * 网络请求方法
     *
     * @param context
     * @param url
     * @param params
     * @param tag
     * @param callback
     */
    public void post(final Context context, final String url, Map<String, Object> params, Object tag, final HttpCallback callback) {

        if (context==null){
            callback.onAfter();
            return;
        }
        //token校验参数
        if (params == null) {
            params = new HashMap<String, Object>();
        }
        FormBody.Builder formBuilder = new FormBody.Builder();
        if (params.size() > 0) {
            Iterator iter = params.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                if (entry != null) {
                    if (entry.getKey() != null && entry.getValue() != null) {
                            formBuilder.add(entry.getKey().toString(), entry.getValue().toString());
                    }
                }
            }

        }
        FormBody formBody = formBuilder.build();
        String cookie = BaseLangApplication.getInstance().getSpUtil().getString(context, COOKIE);
        if (cookie != null && !"".equals(cookie)) {
            try {
                cookie = Des3.decode(cookie);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        Request.Builder requestBuilder = new Request.Builder();
        if (cookie != null) {
            requestBuilder.header(COOKIE, cookie);
        }
        final Request request = requestBuilder.url(url).post(formBody).tag(url).build();

        LogUtil.d("post请求报文Host：" + url);
        LogUtil.d("post请求报文cookie：" + cookie);
        LogUtil.d("post请求报文body：" + params);

        callback.onBefore(request);

        Call call = mOkHttpClient.newCall(request);

        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, final IOException e) {
                onMyFailure(callback,request,e);
            }

            @Override
            public void onResponse(Call call, final Response response) throws IOException {
                onMyResponse(response,context,url,callback,request);
            }
        });
    }

    /**
     * 网络请求方法
     *
     * @param context
     * @param url
     * @param callback
     *
     */
    public void get(final Context context, String url, Map<String, Object> params, final HttpCallback callback) {
        if (context==null){
            callback.onAfter();
            return;
        }
        //token校验参数
        if (params == null) {
            params = new HashMap<String, Object>();
        }

        String paramStr="";
        if (params != null && params.size() > 0) {
            Iterator iter = params.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                if (entry != null) {
                    if (entry.getKey() != null && entry.getValue() != null) {
                        paramStr+=entry.getKey()+"="+entry.getValue()+"&";
                    }
                }
            }
        }
        if(!BaseLangUtil.isEmpty(paramStr)){
            paramStr=paramStr.substring(0,paramStr.length()-1);
            if (!url.contains("?")) {
                url += "?" + paramStr;
            } else {
                url += "&" + paramStr;
            }
        }
        final String reqUrl=url;

        String cookie = BaseLangApplication.getInstance().getSpUtil().getString(context, COOKIE);
        if (cookie != null && !"".equals(cookie)) {
            try {
                cookie = Des3.decode(cookie);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        Request.Builder requestBuilder = new Request.Builder();
        if (cookie != null) {
            requestBuilder.header(COOKIE, cookie);
        }
        LogUtil.d("get请求报文Host：" + reqUrl);
        LogUtil.d("get请求报文cookie：" + cookie);
        LogUtil.d("get请求报文body：" + params);

        final Request request = requestBuilder.url(reqUrl).build();
        callback.onBefore(request);

        Call call = mOkHttpClient.newCall(request);

        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, final IOException e) {
                onMyFailure(callback,request,e);
            }

            @Override
            public void onResponse(Call call, final Response response) throws IOException {
                onMyResponse(response,context,reqUrl,callback,request);
            }
        });
    }

    public void uploadImage(Context context, File file, String serverUrl, LangImageUpInterface upInterface) {
         uploadImage(context, file, serverUrl, null,upInterface);
    }



    public void uploadImage(Context context, File file, String serverUrl, String type,LangImageUpInterface upInterface) {
        // file=new File(Environment.getExternalStorageDirectory(),
        // IMAGE_FILE_NAME);
        String BOUNDARY = UUID.randomUUID().toString(); // 边界标识 随机生成
        String PREFIX = "--", LINE_END = "\r\n";
        String CONTENT_TYPE = "multipart/form-data"; // 内容类型

        try {
            if (!BaseLangUtil.isEmpty(type)) {
                if (serverUrl.contains("?")) {
                    serverUrl += "&type=" + type;
                } else {
                    serverUrl += "?type=" + type;
                }
            }
            URL url = new URL(serverUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(TIME_OUT);
            conn.setConnectTimeout(TIME_OUT);
            conn.setDoInput(true); // 允许输入流
            conn.setDoOutput(true); // 允许输出流
            conn.setUseCaches(false); // 不允许使用缓存
            conn.setRequestMethod("POST"); // 请求方式
            conn.setRequestProperty("Charset", CHARSET); // 设置编码
            conn.setRequestProperty("connection", "keep-alive");
            conn.setRequestProperty("Content-Type", CONTENT_TYPE + ";boundary="
                    + BOUNDARY);
//            if(!BBCUtil.isEmpty(type)){
//                conn.setRequestProperty("credentialsType", type);
//            }
            if (file != null) {
                /**
                 * 当文件不为空，把文件包装并且上传
                 */
                OutputStream outputSteam = conn.getOutputStream();
                DataOutputStream dos = new DataOutputStream(outputSteam);
                StringBuffer sb = new StringBuffer();
                sb.append(PREFIX);
                sb.append(BOUNDARY);
                sb.append(LINE_END);
                /**
                 * 这里重点注意： name里面的值为服务器端需要key 只有这个key 才可以得到对应的文件
                 * filename是文件的名字，包含后缀名的 比如:abc.png
                 */

                sb.append("Content-Disposition: form-data; name=\"pic\"; filename=\""
                        + file.getName() + "\"" + LINE_END);
                sb.append("Content-Type: application/octet-stream; charset="
                        + CHARSET + LINE_END);
                sb.append(LINE_END);
                dos.write(sb.toString().getBytes());

                file.getAbsoluteFile().getAbsolutePath();
                InputStream is = new FileInputStream(file);
                long length = file.length();
                int percent = 0;
//                Message msg;
                byte[] bytes = new byte[1024];
                int len = 0;
                int total = 0;
                while ((len = is.read(bytes)) != -1) {
                    dos.write(bytes, 0, len);
                    total += len;
                    percent = (int) (total * 100 / length);
//                    msg = new Message();
//                    msg.what = 1;
//                    msg.arg1 = percent;
//                    handler.sendMessage(msg);
                }
                is.close();
                dos.write(LINE_END.getBytes());
                byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINE_END)
                        .getBytes();
                dos.write(end_data);
                dos.flush();
                dos.close();
                /**
                 * 获取响应码 200=成功 当响应成功，获取响应的流
                 */
                int res = conn.getResponseCode();

                if (res == 200) {

                    conn.getResponseMessage();
                    StringBuilder resultData = new StringBuilder("");
                    InputStreamReader isr = new InputStreamReader(
                            conn.getInputStream());
                    // 使用缓冲一行行的读入，加速InputStreamReader的速度
                    BufferedReader buffer = new BufferedReader(isr);
                    String inputLine = null;
                    while ((inputLine = buffer.readLine()) != null) {
                        resultData.append(inputLine);
                        resultData.append("\n");
                    }
                    buffer.close();
                    isr.close();
                    conn.disconnect();
                    String result = resultData.toString();

                    LogUtil.d("返回报文body：" + result);

                    List<String> strList = conn.getHeaderFields().get("Set-Cookie");
                    if (strList != null) {
                        for (String str : strList) {
                            Log.d(BaseLangPresenter.TAG,"返回报文cookie：" + str);
                        }
                    }

                    conn.disconnect();
                    if(upInterface!=null){
                        upInterface.success(result);
                    }
                }

            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public String uploadImage(Context context, File file, String serverUrl) {
        // file=new File(Environment.getExternalStorageDirectory(),
        // IMAGE_FILE_NAME);
        String BOUNDARY = UUID.randomUUID().toString(); // 边界标识 随机生成
        String PREFIX = "--", LINE_END = "\r\n";
        String CONTENT_TYPE = "multipart/form-data"; // 内容类型

        try {

            URL url = new URL(serverUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(TIME_OUT);
            conn.setConnectTimeout(TIME_OUT);
            conn.setDoInput(true); // 允许输入流
            conn.setDoOutput(true); // 允许输出流
            conn.setUseCaches(false); // 不允许使用缓存
            conn.setRequestMethod("POST"); // 请求方式
            conn.setRequestProperty("Charset", CHARSET); // 设置编码
            conn.setRequestProperty("connection", "keep-alive");
            conn.setRequestProperty("Content-Type", CONTENT_TYPE + ";boundary="
                    + BOUNDARY);

            if (file != null) {
                /**
                 * 当文件不为空，把文件包装并且上传
                 */
                OutputStream outputSteam = conn.getOutputStream();
                DataOutputStream dos = new DataOutputStream(outputSteam);
                StringBuffer sb = new StringBuffer();
                sb.append(PREFIX);
                sb.append(BOUNDARY);
                sb.append(LINE_END);
                /**
                 * 这里重点注意： name里面的值为服务器端需要key 只有这个key 才可以得到对应的文件
                 * filename是文件的名字，包含后缀名的 比如:abc.png
                 */

                sb.append("Content-Disposition: form-data; name=\"pic\"; filename=\""
                        + file.getName() + "\"" + LINE_END);
                sb.append("Content-Type: application/octet-stream; charset="
                        + CHARSET + LINE_END);
                sb.append(LINE_END);
                dos.write(sb.toString().getBytes());

                file.getAbsoluteFile().getAbsolutePath();
                InputStream is = new FileInputStream(file);
                long length = file.length();
                int percent = 0;
//                Message msg;
                byte[] bytes = new byte[1024];
                int len = 0;
                int total = 0;
                while ((len = is.read(bytes)) != -1) {
                    dos.write(bytes, 0, len);
                    total += len;
                    percent = (int) (total * 100 / length);
//                    msg = new Message();
//                    msg.what = 1;
//                    msg.arg1 = percent;
//                    handler.sendMessage(msg);
                }
                is.close();
                dos.write(LINE_END.getBytes());
                byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINE_END)
                        .getBytes();
                dos.write(end_data);
                dos.flush();
                dos.close();
                /**
                 * 获取响应码 200=成功 当响应成功，获取响应的流
                 */
                int res = conn.getResponseCode();

                if (res == 200) {

                    conn.getResponseMessage();
                    StringBuilder resultData = new StringBuilder("");
                    InputStreamReader isr = new InputStreamReader(
                            conn.getInputStream());
                    // 使用缓冲一行行的读入，加速InputStreamReader的速度
                    BufferedReader buffer = new BufferedReader(isr);
                    String inputLine = null;
                    while ((inputLine = buffer.readLine()) != null) {
                        resultData.append(inputLine);
                        resultData.append("\n");
                    }
                    buffer.close();
                    isr.close();
                    conn.disconnect();
                    String result = resultData.toString();
                    return result;
                }

            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;

    }



    // 批量上传图片公有方法
    public void uploadImgAndParameter(final Context context, Map<String, Object> map,
                                      String url, final HttpCallback callback) {

        // mImgUrls为存放图片的url集合
        MultipartBody.Builder builder = new MultipartBody.Builder()
                .setType(MultipartBody.FORM);

        if (null != map) {
            for (Map.Entry<String, Object> entry : map.entrySet()) {
                if (entry.getValue() != null) {
                    if("images".equals(entry.getKey())){
                        List<File> list= (List<File>) entry.getValue();
                        for (int i=0;i<list.size();i++){
                            builder.addFormDataPart("image"+i, list.get(i).getName(),
                                    RequestBody.create(MEDIA_TYPE_PNG, list.get(i)));
                        }
                    }else{
                        builder.addFormDataPart(entry.getKey(), entry
                                .getValue().toString());
                    }
                }

            }
        }

        // 创建RequestBody
        RequestBody body = builder.build();
        final Request request = new Request.Builder()
                .url(url)// 地址
                .post(body)// 添加请求体
                .build();
        callback.onBefore(request);

        Call call = mOkHttpClient.newCall(request);

        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, final IOException e) {
                    Log.i("","");
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onError(request, e,-1);
                        callback.onAfter();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                try {
                    final String result = response.body().string();
                    String cookie = response.headers().get("Set-Cookie");
                    Log.d(BaseLangPresenter.TAG,"返回报文cookie：" + cookie);
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            callback.onResponse(result);
                            callback.onAfter();
                        }
                    });

                } catch (final Exception e) {
                    e.printStackTrace();
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            callback.onError(request, e,-1);
                            callback.onAfter();
                        }
                    });
                }

            }

        });
    }

    public void downloadFile(final String url,final File saveFile,final HttpCallback callback){

        Request request = new Request.Builder().url(url).build();
        Call call = mOkHttpClient.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {

            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                InputStream is = null;
                byte[] buf = new byte[2048];
                int len = 0;
                FileOutputStream fos = null;
                try {
                    is = response.body().byteStream();
                    fos = new FileOutputStream(saveFile);
                    while ((len = is.read(buf)) != -1) {
                        fos.write(buf, 0, len);
                    }
                    fos.flush();
                    // 下载完成
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            callback.onResponse("");
                        }
                    });
                } catch (Exception e) {

                } finally {
                    try {
                        if (is != null)
                            is.close();
                    } catch (IOException e) {
                    }
                    try {
                        if (fos != null)
                            fos.close();
                    } catch (IOException e) {
                    }
                }
            }
        });
    }


    public void onMyFailure(final HttpCallback callback,final Request request,final Exception e){
        handler.post(new Runnable() {
            @Override
            public void run() {
                callback.onError(request, e,-1);
                LogUtil.e("onError"+e);
                callback.onAfter();
            }
        });
    }

    public void onMyResponse(final Response response,final Context context,String url,final HttpCallback callback,final Request request){
        try {
            final String result = response.body().string();
            List<String> cookies = response.headers("Set-Cookie");
            String cookie = null;
            for (String str : cookies) {
                if (str.contains("JSSIONID=")) {
                    int start = str.indexOf("JSSIONID=");
                    int end = str.indexOf(";");
                    cookie = Des3.encode(str.substring(start, end));
                    BaseLangApplication.getInstance().getSpUtil().putString(context, COOKIE, cookie);

                }
            }
            LogUtil.d("返回报文Host：" + url);
            LogUtil.d("返回报文cookie：" + cookie);
            LogUtil.d("返回报文body：" + result);

            try {
                JSONObject jsonObject = new JSONObject(result);
                final int code=jsonObject.getInt("code");


                //测试
//                if(url.equals("https://sdtest.sudian178.com/sdapp/userWithDraw/getUserWithDrawableAmount")){
//                    //服务器异常
//                    handler.post(new Runnable() {
//                        @Override
//                        public void run() {
//                            callback.onError(request, null,code);
//                            callback.onAfter();
//                        }
//                    });
//                    return;
//                }


                if(code==401){
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            callback.loginFail();
                            callback.onAfter();
                        }
                    });
                }else if(code==200){
                    try {
                        if (jsonObject.getLong("nowTime") > 0) {
                            BaseLangApplication.NOW_TIME = jsonObject.getLong("nowTime");
                        }
                        final String msg = jsonObject.getString("message");
                        if (!BaseLangUtil.isEmpty(msg)) {
                            //有message toast
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    ToastUtil.show(context, msg);
                                }
                            });
                        }

                    }catch (Exception e) {

                    }
                    //正常返回
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            callback.onResponse(result);
                            callback.onAfter();
                        }
                    });
                }else{
                    //不是401 200
                    final String msg = jsonObject.getString("message");
                    if (!BaseLangUtil.isEmpty(msg)) {
                        //有message toast
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                ToastUtil.show(context, msg);
                                callback.onAfter();
                            }
                        });
                    }else {
                        //服务器异常
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callback.onError(request, null,code);
                                callback.onAfter();
                            }
                        });
                    }
                }
            } catch (final Exception e) {
                //code 不存在
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onError(request, e,-1);
                        callback.onAfter();
                    }
                });
            }

        } catch (final Exception e) {
            e.printStackTrace();
            handler.post(new Runnable() {
                @Override
                public void run() {
                    callback.onError(request, e,-1);
                    callback.onAfter();
                }
            });
        }
    }

}
